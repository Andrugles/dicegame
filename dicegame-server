using System;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace Server
{
    class Program
    {
        //Declaring variables for handling clients
        static readonly object _lock = new object();
        static readonly Dictionary<int, TcpClient> list_clients = new Dictionary<int, TcpClient>();
        static int count = 1;
        static ArrayList id_list = new ArrayList();
        static ArrayList disconnects = new ArrayList();

        //Declaring variables for managing gameplay
        static Random randomNum = new Random();
        static List<bool> ready_list = new List<bool>();
        static List<int> rollPoints_list = new List<int>();
        static bool start = false, draw = false;
        static int playersInGame = 0, playersJoined = 0, rdy = 0, winnerPoints = 0, turn = 1;

        static void Main(string[] args)
        {
            //Setting up and starting server socket
            TcpListener ServerSocket = new TcpListener(IPAddress.Any, 5000); //
            ServerSocket.Start();

            //Make the server always be ready to accept connections
            while (true)
            {
                TcpClient client = ServerSocket.AcceptTcpClient();
                lock (_lock) list_clients.Add(count, client);

                //Creates a new thread for each connected client
                Thread thread = new Thread(clientManagement);
                thread.Start(count);
                count++;
            }
        }
        
        //Code for managing clients and gameplay
        public static void clientManagement(object _count)
        {
            int id = (int)_count; //Associates each client with a unique ID number
            bool boolId = false;
            TcpClient client;

            Console.WriteLine("Player " + id + " connected");
            //Adds ID numbers to lists
            id_list.Add(id);
            ready_list.Add(boolId);

            //Declares variables for gameplay use
            int position = id_list.Count;
            int playingPosition = 0, rollPoints = 0, rollCount = 0, winner = 0;
            //Console.WriteLine("Initial position of " + id + " is " + position); //Uncomment to see position in ArrayList id_list

            lock (_lock) client = list_clients[id];

            while (true)
            {   //Gets input stream from client and stores the data in a byte package of size buffer
                NetworkStream stream = client.GetStream();
                byte[] buffer = new byte[1024];
                int byte_count = stream.Read(buffer, 0, buffer.Length);

                if (byte_count == 0) //If package is empty, break the while-loop
                {
                    break;
                }

                //Sets data equal to "Player says: " + the input gotten from the client as a string
                string data = "Player " + id + " says: " + Encoding.ASCII.GetString(buffer, 0, byte_count);

                //Becomes true if the client writes "!ready"
                if (data == "Player " + id + " says: " + "!ready" && !start)
                {
                    if (ready_list[position - 1]) //Becomes true if player is currently ready
                    {
                        data = "Player " + id + " is not ready!";
                        ready_list[position - 1] = false; //Sets the player as not ready
                        playersJoined--;
                    }

                    else //If player is not currently ready:
                    {
                        playersJoined++;
                        playingPosition = playersJoined;

                        //Prepares new match by resetting points
                        rollPoints_list.Clear();
                        rollCount = 0;
                        rollPoints = 0;

                        data = "Player " + id + " is ready!";

                        ready_list[position - 1] = true; //Sets the player as ready
                    }

                    for(int i = 0; i < ready_list.Count; i++)
                        if (ready_list[i]) rdy++; //Counts number of ready players

                    Console.WriteLine("Number of ready players: " + rdy + " of " + id_list.Count);
                    
                    if (rdy == id_list.Count) //If everyone is ready
                    {
                        start = true;
                        data = "\nGame has started!\nWait for your turn, and then type \"!roll\" to roll your lucky number!";
                        
                        playersInGame = id_list.Count; //Stores number of players in game in variable "playersInGame"
                        Console.WriteLine("Players in game: " + playersInGame);
                        Console.WriteLine("Players connected to server: " + id_list.Count);
                        rdy = 0;
                    }
                    else rdy = 0;
                }

                //Becomes true if the player writes "!roll"
                if (data == "Player " + id + " says: " + "!roll" && start && playingPosition <= playersInGame)
                {
                    if (turn == playingPosition)
                    {
                        int roll = randomNum.Next(1, 7); //Stores a random number from 1-6 in int roll
                        rollPoints += roll; //Stores the sum of points from rolls in "rollPoints"
                        rollCount++; //Keeps track of number of rolls for each player
                        data = "\nPlayer " + id + " rolled: " + roll + " and has a total of " + rollPoints + " points";
                        rollPoints_list.Add(rollPoints);
                        if (playingPosition != id_list.Count - (id_list.Count - playersInGame) && playingPosition <= playersInGame) //If current player is not the last player:
                            turn++;
                        else if (playingPosition == id_list.Count-(id_list.Count - playersInGame) && rollCount == 3 && playingPosition <= playersInGame) //If current player is the last player and it's the last turn:
                        {
                            data = "Player " + id + " rolled: " + roll + " and has " + rollPoints + " points";
                                Broadcast(data);
                               

                                //Deciding winner of the game
                                for (int i = 0; i < rollPoints_list.Count - 1; i++) {
                                    if (rollPoints_list[i + 1] >= winnerPoints)
                                    {
                                        if (rollPoints_list[i + 1] == winnerPoints)
                                            draw = true;
                                        if (rollPoints_list[i + 1] != winnerPoints)
                                            draw = false;
                                        if (draw) data = "Draw";

                                        winnerPoints = rollPoints_list[i + 1];
                                        winner = (int)id_list[(i+1) % id_list.Count];
                                    }
                                        
                                }
                                if(!draw)
                                data = "\nGame ended! The game winner is: Player " + winner + " with " + winnerPoints + " points\nCongratulations!\nType \"!ready\" to begin a new match!";

                                //Resets game lobby
                                for (int i = 0; i < id_list.Count; i++)
                                    ready_list[i] = false;
                                start = draw = false;
                                turn = 1;
                                winner = winnerPoints = playersJoined = 0;


                        } else turn = 1; //If current player is the last player and it's not the last turn (starts new round)
                    }
                    else data = "\nWait for your turn, player " + id + "..."; //If player tries to roll when it's not his turn
                }
             else if (data == "Player " + id + " says: " + "!roll" && !start) //If player types "!roll" when not everyone is ready
                {
                    int notRdy = 0;
                    for (int i = 0; i<id_list.Count; i++)
                    {
                        if (!ready_list[i])
                        {
                            notRdy++; //Counts how many players are not ready
                            data = "\nWaiting for " + notRdy + " player(s)";
                        }
                    }
                    notRdy = 0;
                }

                Broadcast(data); //Calls Broadcast method
                Console.WriteLine(data);
            }

            //Closes connection to client
            lock (_lock) list_clients.Remove(id);
            client.Client.Shutdown(SocketShutdown.Both);
            client.Close();
            Console.WriteLine("Player " + id + " disconnected");


            //Resets game lobby after a client has disconnected
            string dataDc = "Game ended because a player left the match... \nType \"!ready\" to begin a new match!";
            Broadcast(dataDc);
            for (int i = 0; i < id_list.Count; i++)
                ready_list[i] = false;
            start = draw = false;
            turn = 1;
            winner = winnerPoints = playersJoined = 0;

            //Counts number of disconnected clients
            for (int i = 0; i < disconnects.Count; i++)
            {
                if ((int)disconnects[i] < position) //Checks how many of the disconnected clients had a lower numbered position than the client disconnecting
                    position--; //Decreases the position number by 1 for each disconnected client with a lower numbered position than the client disconnecting
            }

            //Adds the calculated position of the client upon disconnecting and removes its ID number from id_list
            disconnects.Add(position);
            id_list.RemoveAt(position - 1);

            //Console.WriteLine("\nCurrent players connected: "); //Uncomment to see list of current players connected when a player disconnects
            //for (int i = 0; i < id_list.Count; i++)
            //{
            //    Console.WriteLine(id_list[i]);
            //}
        }       
        
            public static void Broadcast(string data) //Broadcast method sends data to all clients
        {
            byte[] buffer = Encoding.ASCII.GetBytes(data + Environment.NewLine);

            lock (_lock)
            {
                foreach (TcpClient client in list_clients.Values)
                {
                    NetworkStream stream = client.GetStream();

                    stream.Write(buffer, 0, buffer.Length);
                }
            }
        }
    }
}    
